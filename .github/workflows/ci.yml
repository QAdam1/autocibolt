name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]
  workflow_dispatch: # Manual trigger only
  repository_dispatch: # Webhook trigger via Pipedream

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS: 'webkit'

jobs:
  # Security and dependency scanning
  security:
    runs-on: ubuntu-latest
    environment: env
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for outdated dependencies
        run: npx npm-check-updates --target minor

  # Build and test
  build-and-test:
    runs-on: ubuntu-latest
    needs: security
    environment: env
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npm run setup

      - name: TypeScript compilation check
        run: npx tsc --noEmit

      - name: Run development script
        run: npm run dev
        env:
          CI: true
          # Add any environment variables your dev script needs
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: test-results/
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots-${{ matrix.node-version }}
          path: screenshots/
          retention-days: 7

  # Linting and code quality
  lint:
    runs-on: ubuntu-latest
    needs: security
    environment: env
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint (if configured)
        run: npx eslint src/ --ext .ts || echo "ESLint not configured, skipping"
        continue-on-error: true

      - name: Check code formatting
        run: npx prettier --check src/ || echo "Prettier not configured, skipping"
        continue-on-error: true

  # Integration tests with Playwright
  integration-tests:
    runs-on: ubuntu-latest
    needs: [security, build-and-test]
    environment: env
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npm run setup

      - name: Run Playwright tests
        run: npm test
        env:
          CI: true
          PLAYWRIGHT_BROWSERS: ${{ env.PLAYWRIGHT_BROWSERS }}

  # Release workflow
  release:
    runs-on: ubuntu-latest
    needs: [security, build-and-test, lint, integration-tests]
    environment: env
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npm run setup

      - name: Run development script for verification
        run: npm run dev
        env:
          CI: true
          NODE_ENV: production

      - name: Create release artifacts
        run: |
          mkdir -p release
          cp -r src/ release/
          cp package.json release/
          cp package-lock.json release/
          cp tsconfig.json release/
          cp README.md release/ || echo "README.md not found"
          cp LICENSE release/ || echo "LICENSE not found"
          cp .env.example release/
          tar -czf auto-cibolt-${{ github.event.release.tag_name }}.tar.gz -C release .
          zip -r auto-cibolt-${{ github.event.release.tag_name }}.zip release/

      - name: Upload release artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./auto-cibolt-${{ github.event.release.tag_name }}.tar.gz
          asset_name: auto-cibolt-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload release artifacts (zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./auto-cibolt-${{ github.event.release.tag_name }}.zip
          asset_name: auto-cibolt-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip 